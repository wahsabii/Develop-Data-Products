pbinom(3,4,.75,lower.tail = FALSE)
choose(4,3)*.75^4+choose(4,4)*.75^4
choose(4,3)*.5^4+choose(4,4)*.5^4
?ppois
ppois(1,0.1, lower.tail=FALSE)
ppois(178,0.1, lower.tail=T)
10/1787
ppois(178,0.005, lower.tail=T)
ppois(178,0.005, lower.tail=F)
10/1787
ppois(10,.5, lower.tail=F)
ppois(9,.5, lower.tail=F)
ppois(10,10, lower.tail=F)
ppois(9,10, lower.tail=F)
10/1787
ppois(9,.5, lower.tail=F)
ppois(9,.1, lower.tail=F)
ppois(9,1, lower.tail=F)
10/100
10/1787
ppois(9,5, lower.tail=F)
t.test(-3-1, paired=F, var.equal=T,lower.tail=T)
t.test(-4, paired=F, var.equal=T,lower.tail=T)
?power.t.test
power.t.test(
delta = .01,
sd = .04,
sig.level = 0.05,
power = .90,
type = "one.sample",
alternative = "one.sided",
strict = FALSE)
power.t.test(n=100,
delta = .01,
sd = .04,
sig.level = 0.05,
type = "one.sample",
alternative = "one.sided",
strict = FALSE)
1123+1077
2200/2
qt(.972,8)
qt(.90,8)
qt(.90,8, lower.tail=FALSE)
qt(.975,8, lower.tail=FALSE)
qt(.975,8, lower.tail=T)
qt(.9,8, lower.tail=T)
qt(.95,8, lower.tail=T)
qt(.9,8)
qt(.05,8)
qt(.95,8)
qt(.975,8)
.05/2
qt(.025,8)
pt(.975,8)
pt(.975,8, lower.tail=F)
sqrt(16)*(32-30)/10
qt(.95,15)
alpha = 0.05
Ybar = -3
Xbar = 1
sx = 1.8^2 # old variance
nx = 9  # old size
sy = 1.5^2 # new variance
ny = 9  # new size
df <- (  (sx/nx) + (sy/ny)  )^2 /( (sx/nx)^2/(nx-1) + (sy/ny)^2/(ny-1) )  # yeah, it helps to square the terms in the numerator
round(Ybar - Xbar + c(-1,1)*qt(1-(alpha/2), df) * sqrt( (sx/nx) +(sy/ny) ),4)
alpha = 0.05
Ybar = -3
Xbar = 1
sx = 1.8^2 # old variance
nx = 9  # old size
sy = 1.5^2 # new variance
ny = 9  # new size
sp <- sqrt(   ( (nx-1)*sx + (ny-1)*sy )  / (nx+ny-2) )
round( qt(1-(alpha/2), nx+ny-2)*sp*(1/nx+1/ny)^0.5,4)
pt(1.6557,nx+ny-2, lower.tail=F)
X = c(140,138,150,148,135)
Y = c(132,135,151,146,130)
t.test(Y-X, paired=T, alternative="two.sided", var.equal=T)
t.test(Y,X, paired=T, alternative="two.sided", var.equal=T)
t.test(1100,8)
alpha = 0.05
Xbar = 1100
s= 30
n=9
Xbar + c(-1,1)*qt(1-(alpha/2,n-1)*(s/sqrt(n))
Xbar + c(-1,1)*qt(1-(alpha/2,n-1))*(s/sqrt(n))
alpha = 0.05
Xbar = 1100
s= 30
n=9
Xbar + c(-1,1)*qt(1-(alpha/2),n-1)*(s/sqrt(n))
pbinom(2,4,.75,lower.tail=F)
pbinom(2,4,.5,lower.tail=F)
10/1787
ppois(10, 5.5, 0.5, lower.tail=F)
alpha = 0.05
Ybar = -3
Xbar = 1
sy = 1.5^2 # new variance
ny = 9  # new size
sx = 1.8^2 # old variance
nx = 9  # old size
sp <- sqrt(   ( (nx-1)*sx + (ny-1)*sy )  / (nx+ny-2) )
q = round( qt(1-(alpha/2), nx+ny-2)*sp*(1/nx+1/ny)^0.5,4)
pt(q, nx+ny-2, lower.tail=F)
n = 100
Xbar = 0.01
s= = 0.04
alpha = 0.05
power.t.test(n,0,s,alternative="one.sided")
n = 100
Xbar = 0.01
s = 0.04
alpha = 0.05
power.t.test(n,0,s,alternative="one.sided")
n = 100
delta = 0
Xbar = 0.01
s = 0.04
alpha = 0.05
power.t.test(n=n,delta=delta,sd=s,type="paired",alternative="one.sided")
n = 100
delta = 0
Xbar = 0.01
s = 0.04
alpha = 0.05
power.t.test(n=n,delta=delta,sd=s,type="two.sample",alternative="one.sided")
# independent group t confidence intervals with equal variance
mu0 = 0.01
mua = NULL
sigma = 0.04
n = 100
z = qnorm( 1 - alpha)
pnorm( mu0 + z * sigma/ sqrt( n), mean = mu0, sd = sigma/ sqrt(n), lower.tail = FALSE)
mu0 = 0.0
mua = 0.01
sigma = 0.04
n = 100
z = qnorm( 1 - alpha)
pnorm( mu0 + z * sigma/ sqrt( n), mean = mu0, sd = sigma/ sqrt(n), lower.tail = FALSE)
mu0 = 0.0
mua = 0.01
sigma = 0.04
n = 100
z = qnorm( 1 - alpha)
pnorm( mu0 + z * sigma/ sqrt( n), mean = mua, sd = sigma/ sqrt(n), lower.tail = FALSE)
n = 100
delta = 0
Xbar = 0.01
s = 0.04
alpha = 0.05
power.t.test(n=n,delta=delta,sd=s,type="two.sample",alternative="one.sided")
n = 100
delta = 0
Xbar = 0.01
s = 0.04
alpha = 0.05
power.t.test(n=n,delta=Xbar,sd=s,type="two.sample",alternative="one.sided")
delta = 0
Xbar = 0.01
s = 0.04
alpha = 0.05
power=0.90
power.t.test(delta=delta, sd=s, power=power, type="two.sample",alternative="one.sided")
delta = 0
Xbar = 0.01
s = 0.04
alpha = 0.05
power = 0.90
power.t.test(delta=delta, sd=s, power=power, type="two.sample", alternative="one.sided")
n = ????
delta = 0.01
Xbar = 0.01
s = 0.04
alpha = 0.05
power = 0.90
power.t.test(delta=delta, sd=s, power=power, type="two.sample", alternative="one.sided")
n = ????
delta = 0.01
Xbar = 0.01
s = 0.04
alpha = 0.05
power = 0.90
power.t.test(delta=delta, sd=s, power=power, type="paired", alternative="one.sided")
power.t.test (delta=0.01,sd=0.04,type="two.sample", alternative = "one.sided")
power.t.test (n=null,delta=0.01,sd=0.04,type="two.sample", alternative = "one.sided")
power.t.test (delta=0.01,sd=0.04,type="paired", alternative="one.sided" )
power.t.test (n=NULL,delta=0.01,sd=0.04,type="paired", alternative="one.sided" )
power.t.test (
delta=0.01,
sd=0.04,
sig.level = 0.05,
type="two.sample",
alternative="one.sided")
power.t.test (
delta=0.01,
sd=0.04,
sig.level = 0.05,
type="two.sample",
alternative="one.sided")
power.t.test (delta=0.01,
sd=0.04,
sig.level=0.05,
type="two.sample",
alternative="one.sided")
power.t.test (
n=NULL,
delta=0.01,
sd=0.04,
sig.level=0.05,
type="two.sample",
alternative="one.sided")
power.t.test (
n=NULL,
delta=0.01,
sd=0.04,
sig.level=0.05,
type="two.sample",
alternative="one.sided",
strick=FALSE)
power.t.test (
n=NULL,
delta=0.01,
sd=0.04,
sig.level=0.05,
type="two.sample",
alternative="one.sided",
strict=FALSE)
power.t.test( power = 0.8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided") $ n
power.t.test( power = 0.9, delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided") $ n
alpha = 0.05
Ybar = -3
Xbar = 1
sy = 1.5 # new variance
ny = 9  # new size
sx = 1.8 # old variance
nx = 9  # old size
Ybar-Xbar +c(-1,1)*qt(1-alpha,ny+nx-2)*(sy-sx)/sqrt(ny+nx)
sp <- sqrt(   ( (nx-1)*sx + (ny-1)*sy )  / (nx+ny-2) )
q = qt(1-(alpha/2), nx+ny-2)*sp*(1/nx + 1/ny)^0.5)
pt(q, nx+ny-2, lower.tail=F)
alpha = 0.05
Ybar = -3
Xbar = 1
sy = 1.5 # new variance
ny = 9  # new size
sx = 1.8 # old variance
nx = 9  # old size
Ybar-Xbar +c(-1,1)*qt(1-alpha,ny+nx-2)*(sy-sx)/sqrt(ny+nx)
alpha = 0.05
Ybar = -3
Xbar = 1
sy = 1.5 # new variance
ny = 9  # new size
sx = 1.8 # old variance
nx = 9  # old size
Ybar-Xbar +c(-1,1)*qt(1-alpha/2,ny+nx-2)*(sy-sx)/sqrt(ny+nx)
Ybar = -3
Xbar = 1
sy = 1.5 # new variance
ny = 9  # new size
sx = 1.8 # old variance
nx = 9  # old size
Ybar-Xbar +c(-1,1)*qt((1-alpha)/2,ny+nx-2)*(sy-sx)/sqrt(ny+nx)
pt(4.004504,16, lower.tail = F)
alpha = 0.05
Ybar = -3
Xbar = 1
sy = 1.5 # new variance
ny = 9  # new size
sx = 1.8 # old variance
nx = 9  # old size
Ybar-Xbar +c(-1,1)*qt((1-alpha)/2,ny+nx-2)*(sy-sx)/sqrt(ny+nx)
pt(4.004504,16, lower.tail = F)
sp <- sqrt(   ( (nx-1)*sx + (ny-1)*sy )  / (nx+ny-2) )
q = qt(1-(alpha/2, nx+ny-2)*sqrt(sp)*sqrt(1/nx + 1/ny))
q = qt(1-(alpha/2), nx+ny-2)*sqrt(sp)*sqrt(1/nx + 1/ny))
q = qt(1-alpha/2, nx+ny-2)*sqrt(sp)*sqrt(1/nx + 1/ny))
q = qt(1-alpha/2, nx+ny-2)*sqrt(sp)*sqrt(1/nx + 1/ny)
pt(q, nx+ny-2, lower.tail=F)
qt((1-alpha)/2,ny+nx-2)
(1-alpha)/2
(1-alpha)/2
alpha
1-alpha
1-alpha/2
ny+nx-2
sp <- sqrt(   ( (nx-1)*sx + (ny-1)*sy )  / (nx+ny-2) )
alpha = 0.05
Ybar = -3
Xbar = 1
s2y = 1.5^2 # new variance
ny = 9  # new size
s2x = 1.8^2 # old variance
nx = 9  # old size
# Note: this is not the pooled variance
sp <- sqrt(   ( (nx-1)*s2x + (ny-1)*s2y )  / (nx+ny-2) )
ts = Ybar - Xbar / sp*sqrt(1/nx+1/ny)
# scratch:q = qt(1-alpha/2, nx+ny-2)*sp*sqrt(1/nx + 1/ny)
pt(ts, nx+ny-2, lower.tail=F)
pt(abs(ts), nx+ny-2, lower.tail=F)
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1
2
0.8
15
qt(0.95,15)
dim(fs)
t.test(fheight-sheight)
t.test(fs$fheight-fs$sheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(2.5,15,lower.tail=F)
pt(q=2.5,df=15,lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6, size=8, prob=.5, and lower.tail=FALSE)
pbinom(q=6, size=8, prob=0.5, lower.tail=FALSE)
pbinom(q=7, size=8, prob=0.5, lower.tail=FALSE)
pbinom(q=7, size=8, prob=0.5, lower.tail=TRUE)
ppois(9,5,lower.tail = FALSE)
View(myplot)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <= qnorm(.95)
z <- qnorm(.95)
pnorm(30+z)
pnorm(30+z, lower.tail = FALSE)
pnorm(30+z, mean=30,lower.tail = FALSE)
pnorm(30+z, mean=32,lower.tail = FALSE)
pnorm(30+z, mean=32,sd=1,lower.tail = FALSE)
pnorm(30+z, mean=32,sd=2,lower.tail = FALSE)
pnorm(30+z*2, mean=32,sd=2,lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues,method="bonferroni"))
sum(p.adjust(pValues,method="bonferroni")<0.05)
sum(p.adjust(pValues,method="BH")<0.05)
tail(pValues2)
tail(trueStatus)
table(pValues<.05,trueStatus)
table(pValues2<.05,trueStatus)
.024
24/500
table(p.adjust(pValues2,method = "bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method = "BH")<.05,trueStatus)
sum(1/6*6)
sum(1\:6)/6
sum(1\:6)/6
sum(1\:6)/6
sum(1:6)/6
print(g2)
head(sh)
head(nh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace = TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam,1,median)
median(fh)
median(meds)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)/sqrt(1000)
sd(resampledMedians)
quantile(resampledMedians,c(.25,.975))
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts,group)
obs
apply(Bdata$count=Cdata$count, mean)
apply(Bdata$count0-Cdata$count, mean)
mean(Bdata$count)
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms)
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
.64/.32
lm(x~y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm (x~y)
lm(x~y)
lm(y~x)
-0.04462  /
-1.713
-1.713\-0.04462
-1.713 \ -0.04462
-1.713 / -0.04462
2*sd(y)/sd(x)
var(y)/var(x)
cor(y,x)
.5
rho = .5
1/rho
rho/ (1/rho)
rho = .75
rho/ (1/rho)
rho = .98
rho/ (1/rho)
1/rho
1/.98
.1
rho = .1
1/rho
rho/ (1/rho)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(y~x-1)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x-mean(x)
(x-mean(x))2
(x-mean(x))*2
(x-mean(x))*2*w
sum((x-mean(x))*2*w)
sum((x-mean(x))*2*w)/4
x
sum((x-mean(x))^2*w)/4
sqrt(0)
1/sqrt(w)
1/sqrt(w)+x
mean(1/sqrt(w)+x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(sum((x-mean(x))^2*w))
mean(x*w)
mean(w)
mean(x)
mean(w)*mean(x)
mean(x)
mu = mean(x)
(x-mu)^2
mean(x-mu)^2
mean((x-mu)^2)
mean(w*(x-mu)^2)
install.packages("SixSigma")
A = array(c(3,2,-1,2,-2,0.5,-1,4,-1))
b = c(1,-2,0)
A %*% b
A
A = array(c(3,2,-1,2,-2,0.5,-1,4,-1), dim=c(3,3))
b = c(1,-2,0)
A
b
solve(A,b)
A %*% solve(A,b)
5*3+4+2*-2
b=(3,4,-2)
b=c(3,4,-2)
S1 = c(5,-1,2)
S1*b
15-8
S1 %*% b
S2 = c(-2,6,9)
S2 %*% b
S3 = c(-7,5,-3)
S3 %*% b
b
S3 %*% b
A = array(c(1,0,0,0,4,1,0,0,-2,-7,5,1,8,2,-1,3), dim=c(4,4))
A
b=c(12,-4,7,-5)
solve(A,b)
setwd("~/DataScienceCoursera/9. Develop Data Products/AHP_Vector")
publish(title = 'AHP Vector Presentation', 'index.html', host = 'rpubs')
library(shiny)
publish(title = 'AHP Vector Presentation', 'index.html', host = 'rpubs')
publish(title = 'AHP Vector Presentation', 'index.html', host = 'rpubs')
publish(title = 'AHP Vector Presentation', 'index.html', host = 'rpubs')
library(shiny)
publish(title = 'AHP Vector Presentation', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'AHP Vector Presentation', 'index.html', host = 'rpubs')
setwd("~/DataScienceCoursera/9. Develop Data Products/AHPCourseProject")
runApp()
